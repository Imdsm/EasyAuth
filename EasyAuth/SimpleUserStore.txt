using System;
using System.Collections.Generic;
using System.Linq;

namespace EasyAuth
{
    public class SimpleUserStore : IUserStore
    {
        private List<UserData> userdata;

        public SimpleUserStore()
        {
            userdata = new List<UserData>();
        }

        public void AddUser(UserData user)
        {
            if (user == null) throw new ArgumentNullException("user");
            if (userdata.Contains(user)) throw new UserAlreadyExistsException();
            userdata.Add((UserData)user.Clone());
        }

        public void DeleteUser(UserData user)
        {
            if (user == null) throw new ArgumentNullException("user");
            if (!userdata.Contains(user)) throw new UserDoesNotExistException();
            userdata.Remove(user);
        }

        public void UpdateUser(UserData user)
        {
            if (user == null) throw new ArgumentNullException("user");
            if (!userdata.Contains(user)) throw new UserDoesNotExistException();
            UserData _user = userdata.FirstOrDefault(x => x.UserId == user.UserId);
            _user = user;
        }

        public List<UserData> GetUsers()
        {
            return userdata;
        }

        public UserData GetUserById(int id)
        {
            if (id < 0) throw new ArgumentException("id");
            if (!userdata.Any(x => x.UserId == id)) throw new UserDoesNotExistException();
            return userdata.First(x => x.UserId == id);
        }

        public UserData GetUserByUsername(string username)
        {
            if (username == null) throw new ArgumentNullException("username");
            if (!userdata.Any(x => x.Username == username)) throw new UserDoesNotExistException();
            return userdata.First(x => x.Username == username);
        }        

        public void Dispose()
        {
            userdata = null;
        }
    }
}